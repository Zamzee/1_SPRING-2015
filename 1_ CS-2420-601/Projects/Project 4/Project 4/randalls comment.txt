What really helped me was drawing the tree out on paper through each iteration. That will help you both determine when to rotate and how. Write out all the necessary steps to move the pointers around. Your debugger is your friend...lots of stepping into/through. I underestimated this project and it was much more difficult than I originally thought. 

One hint is you can use absolute value of the bf of the node to determine if you need to rotate and then you can determine if the imbalance is on the left or right depending on if the bf is positive or negative:

if(abs(node->bf) > 1){ //we know we must rotate

    if(node->bf < 0){ //some sort of right shift

    }

    else{ //some sort of left shift

    }

}

Hope this helps.